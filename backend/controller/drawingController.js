const path = require('path'); // Import path module
const fs = require('fs'); // Import fs module
const dbconnect = require('../DbConnect');
const multer = require('multer');

// Ensure the directory exists for file uploads
const uploadDir = path.join(__dirname, '../Assets', 'Drawing');
fs.mkdirSync(uploadDir, { recursive: true }); // Create 'Asset/Drawing' directory if it doesn't exist

// Configure Multer for file storage
const storage = multer.diskStorage({
    // Define destination for uploaded files
    destination: function (req, file, cb) {
        cb(null, uploadDir); // Save files in 'Asset/Drawing' folder
    },
    // Define the filename for uploaded files
    filename: function (req, file, cb) {
        const uniqueSuffix = `${req.body.Part_No}-${Date.now()}`; // Create a unique filename
        const originalName = Buffer.from(file.originalname, 'latin1').toString('utf8'); // Convert from latin1 to UTF-8
        cb(null, `${uniqueSuffix}-${originalName}`); // Append original filename to unique identifier
    }
    
});

// Initialize Multer with storage configuration
const upload = multer({ 
    storage: storage, 
    limits: { fileSize: 10 * 1024 * 1024, file: 4 } // Limit file size to 10MB and max file to 4
});

const uploadMidleware = upload.array('file', 4);

// Handle file uploads
const postDrawing = async (req, res) => {
    const Status = "Active";
    // Access the user email from requireAuth middleware
    const userEmail = req.user.email; // This email comes from requireAuth
    const CreateBy = userEmail;
    console.log('userEmail:', userEmail)
    try {
        const Part_No = req.body.Part_No; // Get the text input from the request body

        if (!Part_No) { // Check if Part_No is provided
            return res.status(400).json({ msg: 'Part No is required.' });
        }
        //Check multer flies of array
        if (!req.files || req.files.length === 0) { // Check if files were uploaded
            return res.status(400).json({ msg: 'No files uploaded.' });
        }

        const fileInfos = req.files.map(file => ({
            filename: file.filename, // Get the filename generated by Multer
            path: file.path // Get the file path where it's stored
        }));

        // Save related information to the database
        for (const fileInfo of fileInfos) {
            await dbconnect.query('INSERT INTO drawing (filename, filepath, "Part_No", "CreatedBy", "Status") VALUES ($1, $2, $3, $4, $5)', 
                [fileInfo.filename, fileInfo.path, Part_No, CreateBy, Status]); // Insert into 'files' table
        }

        res.status(200).json({ msg: 'Files uploaded successfully!', file: fileInfos }); // Send success response
    } catch (error) {
        console.error('Error uploading files:', error); // Log error
        res.status(500).json({ msg: 'Error uploading files' }); // Send error response
    }
};

const getDrawingByCode_Fg = async (req, res) =>{
    const Code_Fg = req.params.Code_Fg;
    try {
        const sqlCommand = `
            SELECT drawing."Part_No", drawing."filename" ,drawing."filepath" 
            FROM drawing
            JOIN fg ON drawing."Part_No" = fg."Part_No"
            WHERE fg."Code_Fg" = $1;

        `
        dbconnect.query(sqlCommand, [Code_Fg], (err, result)=>{
            if(err){
                res.status(400).json({
                    msg: "Fail",
                    success: false,
                    data: err
                })
            }else{
                res.status(200).json({
                    msg: "Success",
                    success: true,
                    data: result.rows,
                    count: result.rows.length,
                })
            }
        })
    } catch (error) {
        res.status(500).json({
            msg: "Fail",
            success: false,
            data:error
        })
    }
}

module.exports = {
    uploadMidleware,
    postDrawing,
    getDrawingByCode_Fg
};
